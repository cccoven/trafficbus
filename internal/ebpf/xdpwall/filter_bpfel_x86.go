// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64

package xdpwall

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type FilterIpItem struct {
	Enable int16
	_      [2]byte
	Addr   uint32
	Mask   uint32
}

type FilterIpSetDirection uint32

const (
	FilterIpSetDirectionSRC  FilterIpSetDirection = 1
	FilterIpSetDirectionDST  FilterIpSetDirection = 2
	FilterIpSetDirectionBOTH FilterIpSetDirection = 3
)

type FilterMatchEvent struct {
	RuleIndex int32
	_         [4]byte
	Bytes     uint64
}

type FilterProtocol uint32

const (
	FilterProtocolICMP FilterProtocol = 1
	FilterProtocolUDP  FilterProtocol = 17
	FilterProtocolTCP  FilterProtocol = 6
)

type FilterRule struct {
	Enable          int16
	_               [2]byte
	Interface       int32
	Target          FilterTarget
	Protocol        FilterProtocol
	Source          uint32
	SourceMask      uint32
	Destination     uint32
	DestinationMask uint32
	MatchExt        struct {
		Enable int16
		_      [2]byte
		Set    struct {
			Enable    int16
			_         [2]byte
			Id        uint32
			Direction FilterIpSetDirection
		}
		Udp struct {
			Enable int16
			Sport  uint16
			Dport  uint16
		}
		Tcp struct {
			Enable int16
			Sport  uint16
			Dport  uint16
		}
		MultiPort struct {
			Enable  int16
			_       [2]byte
			SrcSize int32
			DstSize int32
			Src     [10]struct {
				Port uint16
				Max  uint16
			}
			Dst [10]struct {
				Port uint16
				Max  uint16
			}
		}
	}
	TargetExt struct{}
}

type FilterTarget uint32

const (
	FilterTargetABORTED FilterTarget = 0
	FilterTargetDROP    FilterTarget = 1
	FilterTargetACCEPT  FilterTarget = 2
	FilterTargetTX      FilterTarget = 3
	FilterTargetFORWARD FilterTarget = 4
	FilterTargetLOG     FilterTarget = 5
)

// LoadFilter returns the embedded CollectionSpec for Filter.
func LoadFilter() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_FilterBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load Filter: %w", err)
	}

	return spec, err
}

// LoadFilterObjects loads Filter and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*FilterObjects
//	*FilterPrograms
//	*FilterMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadFilterObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadFilter()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// FilterSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type FilterSpecs struct {
	FilterProgramSpecs
	FilterMapSpecs
}

// FilterSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type FilterProgramSpecs struct {
	XdpWallFunc *ebpf.ProgramSpec `ebpf:"xdp_wall_func"`
}

// FilterMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type FilterMapSpecs struct {
	IpSetMap    *ebpf.MapSpec `ebpf:"ip_set_map"`
	MatchEvents *ebpf.MapSpec `ebpf:"match_events"`
	RuleMap     *ebpf.MapSpec `ebpf:"rule_map"`
}

// FilterObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadFilterObjects or ebpf.CollectionSpec.LoadAndAssign.
type FilterObjects struct {
	FilterPrograms
	FilterMaps
}

func (o *FilterObjects) Close() error {
	return _FilterClose(
		&o.FilterPrograms,
		&o.FilterMaps,
	)
}

// FilterMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadFilterObjects or ebpf.CollectionSpec.LoadAndAssign.
type FilterMaps struct {
	IpSetMap    *ebpf.Map `ebpf:"ip_set_map"`
	MatchEvents *ebpf.Map `ebpf:"match_events"`
	RuleMap     *ebpf.Map `ebpf:"rule_map"`
}

func (m *FilterMaps) Close() error {
	return _FilterClose(
		m.IpSetMap,
		m.MatchEvents,
		m.RuleMap,
	)
}

// FilterPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadFilterObjects or ebpf.CollectionSpec.LoadAndAssign.
type FilterPrograms struct {
	XdpWallFunc *ebpf.Program `ebpf:"xdp_wall_func"`
}

func (p *FilterPrograms) Close() error {
	return _FilterClose(
		p.XdpWallFunc,
	)
}

func _FilterClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed filter_bpfel_x86.o
var _FilterBytes []byte
