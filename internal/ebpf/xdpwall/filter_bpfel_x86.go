// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64

package xdpwall

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type FilterIpItem struct {
	Addr uint32
	Mask uint32
}

type FilterIpSet struct {
	Items [255]FilterIpItem
	Count int32
}

type FilterIpSetDirection uint32

const (
	FilterIpSetDirectionSRC  FilterIpSetDirection = 1
	FilterIpSetDirectionDST  FilterIpSetDirection = 2
	FilterIpSetDirectionBOTH FilterIpSetDirection = 3
)

type FilterMatchExt struct {
	Enable    int32
	Set       FilterSetExt
	Udp       FilterUdpExt
	Tcp       FilterTcpExt
	Multiport uint16
	_         [2]byte
}

type FilterProtocol uint32

const (
	FilterProtocolICMP FilterProtocol = 1
	FilterProtocolUDP  FilterProtocol = 17
	FilterProtocolTCP  FilterProtocol = 6
)

type FilterRuleItem struct {
	Enable          int32
	_               [4]byte
	Pkts            uint64
	Bytes           uint64
	Target          FilterTarget
	Protocol        FilterProtocol
	Source          uint32
	SourceMask      uint32
	Destination     uint32
	DestinationMask uint32
	MatchExt        FilterMatchExt
	TargetExt       FilterTargetExt
	_               [4]byte
}

type FilterRuleSet struct {
	Items [100]FilterRuleItem
	Count int32
	_     [4]byte
}

type FilterSetExt struct {
	Enable    int32
	Id        uint32
	Direction FilterIpSetDirection
}

type FilterTarget uint32

const (
	FilterTargetABORTED FilterTarget = 0
	FilterTargetDROP    FilterTarget = 1
	FilterTargetACCEPT  FilterTarget = 2
	FilterTargetTX      FilterTarget = 3
	FilterTargetFORWARD FilterTarget = 4
	FilterTargetLOG     FilterTarget = 5
)

type FilterTargetExt struct{}

type FilterTcpExt struct {
	Enable int32
	Sport  uint16
	Dport  uint16
}

type FilterUdpExt struct {
	Enable int32
	Sport  uint16
	Dport  uint16
}

// LoadFilter returns the embedded CollectionSpec for Filter.
func LoadFilter() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_FilterBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load Filter: %w", err)
	}

	return spec, err
}

// LoadFilterObjects loads Filter and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*FilterObjects
//	*FilterPrograms
//	*FilterMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadFilterObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadFilter()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// FilterSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type FilterSpecs struct {
	FilterProgramSpecs
	FilterMapSpecs
}

// FilterSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type FilterProgramSpecs struct {
	XdpWallFunc *ebpf.ProgramSpec `ebpf:"xdp_wall_func"`
}

// FilterMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type FilterMapSpecs struct {
	IpSetMap   *ebpf.MapSpec `ebpf:"ip_set_map"`
	RuleSetMap *ebpf.MapSpec `ebpf:"rule_set_map"`
}

// FilterObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadFilterObjects or ebpf.CollectionSpec.LoadAndAssign.
type FilterObjects struct {
	FilterPrograms
	FilterMaps
}

func (o *FilterObjects) Close() error {
	return _FilterClose(
		&o.FilterPrograms,
		&o.FilterMaps,
	)
}

// FilterMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadFilterObjects or ebpf.CollectionSpec.LoadAndAssign.
type FilterMaps struct {
	IpSetMap   *ebpf.Map `ebpf:"ip_set_map"`
	RuleSetMap *ebpf.Map `ebpf:"rule_set_map"`
}

func (m *FilterMaps) Close() error {
	return _FilterClose(
		m.IpSetMap,
		m.RuleSetMap,
	)
}

// FilterPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadFilterObjects or ebpf.CollectionSpec.LoadAndAssign.
type FilterPrograms struct {
	XdpWallFunc *ebpf.Program `ebpf:"xdp_wall_func"`
}

func (p *FilterPrograms) Close() error {
	return _FilterClose(
		p.XdpWallFunc,
	)
}

func _FilterClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed filter_bpfel_x86.o
var _FilterBytes []byte
