// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64

package xdp

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type bpfProtocol uint32

const (
	bpfProtocolICMP bpfProtocol = 1
	bpfProtocolUDP  bpfProtocol = 17
	bpfProtocolTCP  bpfProtocol = 6
)

type bpfXdpAction uint32

const (
	bpfXdpActionXDP_ABORTED  bpfXdpAction = 0
	bpfXdpActionXDP_DROP     bpfXdpAction = 1
	bpfXdpActionXDP_PASS     bpfXdpAction = 2
	bpfXdpActionXDP_TX       bpfXdpAction = 3
	bpfXdpActionXDP_REDIRECT bpfXdpAction = 4
)

type bpfXdpRule struct {
	Num             uint32
	_               [4]byte
	Pkts            uint64
	Bytes           uint64
	Target          uint32
	Protocol        uint32
	Source          uint32
	SourceMask      uint32
	Destination     uint32
	DestinationMask uint32
	UdpExt          struct {
		Enable int32
		Sport  uint16
		Dport  uint16
	}
	TcpExt struct {
		Enable int32
		Sport  uint16
		Dport  uint16
	}
	MatchExt  struct{ Multiport [65535]uint16 }
	TargetExt struct{}
	_         [2]byte
}

// loadBpf returns the embedded CollectionSpec for bpf.
func loadBpf() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_BpfBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load bpf: %w", err)
	}

	return spec, err
}

// loadBpfObjects loads bpf and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*bpfObjects
//	*bpfPrograms
//	*bpfMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadBpfObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadBpf()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// bpfSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpfSpecs struct {
	bpfProgramSpecs
	bpfMapSpecs
}

// bpfSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpfProgramSpecs struct {
	XdpProdFunc *ebpf.ProgramSpec `ebpf:"xdp_prod_func"`
}

// bpfMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpfMapSpecs struct {
	XdpRuleMap *ebpf.MapSpec `ebpf:"xdp_rule_map"`
}

// bpfObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpfObjects struct {
	bpfPrograms
	bpfMaps
}

func (o *bpfObjects) Close() error {
	return _BpfClose(
		&o.bpfPrograms,
		&o.bpfMaps,
	)
}

// bpfMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpfMaps struct {
	XdpRuleMap *ebpf.Map `ebpf:"xdp_rule_map"`
}

func (m *bpfMaps) Close() error {
	return _BpfClose(
		m.XdpRuleMap,
	)
}

// bpfPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpfPrograms struct {
	XdpProdFunc *ebpf.Program `ebpf:"xdp_prod_func"`
}

func (p *bpfPrograms) Close() error {
	return _BpfClose(
		p.XdpProdFunc,
	)
}

func _BpfClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed bpf_bpfel_x86.o
var _BpfBytes []byte
